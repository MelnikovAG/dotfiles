# shellcheck shell=zsh
sandbox_init_nvm(){
  source "$NVM_DIR"/nvm.sh
  autoload -U add-zsh-hook
  load-nvmrc() {
    local nvmrc_path="$(nvm_find_nvmrc)"

    if [ -n "$nvmrc_path" ]; then
      local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

      if [ "$nvmrc_node_version" = "N/A" ]; then
        nvm install
      elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
        nvm use
      fi
    elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
      echo "Reverting to nvm default version"
      nvm use default
    fi
  }
  add-zsh-hook chpwd load-nvmrc
  load-nvmrc

  # Fix yarn binary issue https://github.com/yarnpkg/yarn/issues/648
  # This has to happen in sandbox init, because the naive solution — doing it
  # in .zshrc — would invoke `yarn` on shell startup, thereby precluding
  # lazy-loading. Should this create problems with Yarn global binaries, try a
  # workaround such as computing the Yarn global binary path on dotfiles
  # install and caching it in a file to be read by .zshrc on startup.
  export PATH="$(yarn global bin):$PATH"
}
sandbox_hook nvm node
sandbox_hook nvm nodemon
sandbox_hook nvm yarn

# Use direnv to declare paths where e.g. nvm must be loaded in.
# $ echo 'export sandbox_load_nvm="1"' >> /path/to/repo/.envrc
load-sandboxes(){
  if [ -n "$sandbox_load_nvm" ]; then
    sandbox nvm
  fi
}

add-zsh-hook chpwd load-sandboxes
